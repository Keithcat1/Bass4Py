from typing import List, Optional, Union

from ..constants import SAMPLE
from ..evaluable import Evaluable
from .channel import Channel
from .output_device import OutputDevice
from .stream import Stream

class Sample(Evaluable):

  def bytes_to_seconds(self, bytes: int) -> float: ...
  def free(self) -> bool: ...
  def get_channel(self, new: bool = ..., loop: bool = ..., override: SAMPLE = ..., speakers: int = ...) -> Channel: ...
  def get_length(self, mode: int = ...) -> int: ...
  def get_stream(self, new: bool = ..., loop: bool = ..., override: SAMPLE = ..., autofree: bool = ..., decode: bool = ..., speakers: int = ...) -> Stream: ...
  def seconds_to_bytes(self, secs: float) -> int: ...
  def stop(self) -> bool: ...
  
  @staticmethod
  def from_parameters(length: int, freq: int, chans: int, max: int = ..., flags: SAMPLE = ..., device: Optional[OutputDevice] = ...) -> Sample: ...
  
  @staticmethod
  def from_bytes(data: bytes, max: int = ..., flags: SAMPLE = ..., length: int = ..., device: Optional[OutputDevice] = ...) -> Sample: ...
  
  @staticmethod
  def from_file(file: Union[str, bytes], max: int = ..., flags: SAMPLE = ..., device: Optional[OutputDevice] = ...) -> Sample: ...
  
  @property
  def channel_count(self) -> int: ...
  
  @property
  def frequency(self) -> int: ...
  
  @frequency.setter
  def frequency(self, value: int) -> None: ...
  
  @property
  def volume(self) -> float: ...
  
  @volume.setter
  def volume(self, value: float) -> None: ...
  
  @property
  def pan(self) -> float: ...
  
  @pan.setter
  def pan(self, value: float) -> None: ...
  
  @property
  def flags(self) -> SAMPLE: ...
  
  @flags.setter
  def flags(self, value: SAMPLE) -> None: ...
  
  @property
  def length(self) -> int: ...
  
  @length.setter
  def length(self, value: int) -> None: ...
  
  @property
  def max(self) -> int: ...
  
  @max.setter
  def max(self, value: int) -> None: ...
  
  @property
  def resolution(self) -> int: ...
  
  @resolution.setter
  def resolution(self, value: int) -> None: ...
  
  @property
  def init_channel_count(self) -> int: ...
  
  @init_channel_count.setter
  def init_channel_count(self, value: int) -> None: ...
  
  @property
  def minimum_gap(self) -> int: ...
  
  @minimum_gap.setter
  def minimum_gap(self, value: int) -> None: ...
  
  @property
  def mode_3d(self) -> int: ...
  
  @mode_3d.setter
  def mode_3d(self, value: int) -> None: ...
  
  @property
  def minimum_distance(self) -> float: ...
  
  @minimum_distance.setter
  def minimum_distance(self, value: float) -> None: ...
  
  @property
  def maximum_distance(self) -> float: ...
  
  @maximum_distance.setter
  def maximum_distance(self, value: float) -> None: ...
  
  @property
  def inner_angle(self) -> int: ...
  
  @inner_angle.setter
  def inner_angle(self, value: int) -> None: ...
  
  @property
  def outer_angle(self) -> int: ...
  
  @outer_angle.setter
  def outer_angle(self, value: int) -> None: ...
  
  @property
  def outer_volume(self) -> float: ...
  
  @outer_volume.setter
  def outer_volume(self, value: float) -> None: ...
  
  @property
  def channels(self) -> List[Channel]: ...
  
  @property
  def data(self) -> bytes: ...
  
  @data.setter
  def data(self, value: bytes) -> None: ...
  
  @property
  def device(self) -> Optional[OutputDevice]: ...
  
  @device.setter
  def device(self, value: Optional[OutputDevice]) -> None: ...
